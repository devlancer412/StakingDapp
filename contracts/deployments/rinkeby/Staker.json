{
  "address": "0xfDAcdD88365270Ff79239DD33d2498e20ba1841f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Staker.StakeData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        }
      ],
      "name": "setRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        }
      ],
      "name": "setStakingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "test",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x05c8886280ff537a0d9eacca6dae95274f751c676059fd43c3af11084500c1f4",
  "receipt": {
    "to": null,
    "from": "0x687125E8D62019aB0EB49a08738dF7D5981c7951",
    "contractAddress": "0xfDAcdD88365270Ff79239DD33d2498e20ba1841f",
    "transactionIndex": 22,
    "gasUsed": "759260",
    "logsBloom": "0x00000010000000000000000000000000000000000000000000800000000000000000040000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000008000000800000000000000000000000000000000400000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x868595f5034b9a7d1329317e72e1308ffc3f6fd1698a5509986db4036ccf3608",
    "transactionHash": "0x05c8886280ff537a0d9eacca6dae95274f751c676059fd43c3af11084500c1f4",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 10788637,
        "transactionHash": "0x05c8886280ff537a0d9eacca6dae95274f751c676059fd43c3af11084500c1f4",
        "address": "0xfDAcdD88365270Ff79239DD33d2498e20ba1841f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000687125e8d62019ab0eb49a08738df7d5981c7951"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x868595f5034b9a7d1329317e72e1308ffc3f6fd1698a5509986db4036ccf3608"
      }
    ],
    "blockNumber": 10788637,
    "cumulativeGasUsed": "6307023",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "40b5b19558ce3c5d71aba1179e2b467f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Staker.StakeData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staker.sol\":\"Staker\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Staker.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ncontract Staker is Ownable {\\n    struct StakeData {\\n        uint256 time;\\n        uint256 amount;\\n        uint256 rewardAmount;\\n    }\\n\\n    address private _stakingToken;\\n    address private _rewardToken;\\n    uint256 private _rate;\\n\\n    mapping(address => StakeData) private stakes;\\n\\n    constructor() {\\n        _rate = 100;\\n    }\\n\\n    modifier canStake() {\\n        require(\\n            _stakingToken != address(0),\\n            \\\"STAKING:doesn't set staking token\\\"\\n        );\\n        require(_rewardToken != address(0), \\\"STAKING:doesn't set reward token\\\");\\n        _;\\n    }\\n\\n    function setStakingToken(address tokenAddr) public onlyOwner {\\n        _stakingToken = tokenAddr;\\n    }\\n\\n    function setRewardToken(address tokenAddr) public onlyOwner {\\n        _rewardToken = tokenAddr;\\n    }\\n\\n    function setRate(uint256 rate) public onlyOwner {\\n        _rate = rate;\\n    }\\n\\n    function stake(uint256 amount) public canStake {\\n        IERC20(_stakingToken).transferFrom(msg.sender, address(this), amount);\\n\\n        uint256 rateSpace = 1 weeks;\\n        if (\\n            stakes[msg.sender].amount > 0 || stakes[msg.sender].rewardAmount > 0\\n        ) {\\n            stakes[msg.sender].rewardAmount +=\\n                (stakes[msg.sender].amount *\\n                    _rate *\\n                    (block.timestamp - stakes[msg.sender].time)) /\\n                10000 /\\n                rateSpace;\\n            stakes[msg.sender].time = block.timestamp;\\n            stakes[msg.sender].amount += amount;\\n            return;\\n        }\\n\\n        stakes[msg.sender] = StakeData(amount, block.timestamp, 0);\\n    }\\n\\n    function unStake(uint256 amount) public canStake {\\n        require(\\n            stakes[msg.sender].amount >= amount,\\n            \\\"STAKING:amount is small than request\\\"\\n        );\\n\\n        uint256 rateSpace = 1 weeks;\\n        stakes[msg.sender].rewardAmount +=\\n            (\\n                (stakes[msg.sender].amount *\\n                    _rate *\\n                    (block.timestamp - stakes[msg.sender].time))\\n            ) /\\n            10000 /\\n            rateSpace;\\n\\n        stakes[msg.sender].time = block.timestamp;\\n        stakes[msg.sender].amount -= amount;\\n\\n        IERC20(_stakingToken).transfer(msg.sender, amount);\\n    }\\n\\n    function withdraw() public canStake {\\n        uint256 rateSpace = 1 weeks;\\n        stakes[msg.sender].rewardAmount +=\\n            (\\n                (stakes[msg.sender].amount *\\n                    _rate *\\n                    (block.timestamp - stakes[msg.sender].time))\\n            ) /\\n            10000 /\\n            rateSpace;\\n\\n        stakes[msg.sender].time = block.timestamp;\\n\\n        require(stakes[msg.sender].rewardAmount > 0, \\\"STAKING:amount is zero\\\");\\n        uint256 rewardAmount = stakes[msg.sender].rewardAmount;\\n        stakes[msg.sender].rewardAmount = 0;\\n        IERC20(_rewardToken).transfer(msg.sender, rewardAmount);\\n    }\\n\\n    function getStakingData() public view returns (StakeData memory) {\\n        return stakes[msg.sender];\\n    }\\n\\n    function getReward() public view returns (uint256 amount) {\\n        uint256 rateSpace = 1 weeks;\\n        amount = stakes[msg.sender].amount;\\n        amount +=\\n            (\\n                (stakes[msg.sender].amount *\\n                    _rate *\\n                    (block.timestamp - stakes[msg.sender].time))\\n            ) /\\n            10000 /\\n            rateSpace;\\n    }\\n\\n    function test() public view returns (uint256) {\\n        return (block.timestamp - stakes[msg.sender].time);\\n    }\\n}\\n\",\"keccak256\":\"0x570bf4e0543e8e4cd98e302d1305e0ddc6d9527b245cddd0c31595e959a23b33\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a33610024565b6064600355610074565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610bea806100836000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806376e35d891161007157806376e35d891461011f5780638aee8127146101495780638da5cb5b1461015c578063a694fc3a14610177578063f2fde38b1461018a578063f8a8fd6d1461019d57600080fd5b80631e9b12ef146100b957806334fcf437146100ce5780633ccfd60b146100e15780633d18b912146100e95780635d3eea9114610104578063715018a614610117575b600080fd5b6100cc6100c7366004610a18565b6101a5565b005b6100cc6100dc366004610a48565b6101fa565b6100cc610229565b6100f1610402565b6040519081526020015b60405180910390f35b6100cc610112366004610a48565b61047b565b6100cc610624565b61012761065a565b60408051825181526020808401519082015291810151908201526060016100fb565b6100cc610157366004610a18565b6106b8565b6000546040516001600160a01b0390911681526020016100fb565b6100cc610185366004610a48565b610704565b6100cc610198366004610a18565b610911565b6100f16109a9565b6000546001600160a01b031633146101d85760405162461bcd60e51b81526004016101cf90610a61565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102245760405162461bcd60e51b81526004016101cf90610a61565b600355565b6001546001600160a01b03166102515760405162461bcd60e51b81526004016101cf90610a96565b6002546001600160a01b03166102795760405162461bcd60e51b81526004016101cf90610ad7565b3360009081526004602052604090205462093a809081906127109061029e9042610b22565b600354336000908152600460205260409020600101546102be9190610b39565b6102c89190610b39565b6102d29190610b58565b6102dc9190610b58565b33600090815260046020526040812060020180549091906102fe908490610b7a565b90915550503360009081526004602052604090204281556002015461035e5760405162461bcd60e51b81526020600482015260166024820152755354414b494e473a616d6f756e74206973207a65726f60501b60448201526064016101cf565b3360008181526004602081905260408083206002908101805494905554905163a9059cbb60e01b8152918201939093526024810182905290916001600160a01b03169063a9059cbb906044015b602060405180830381600087803b1580156103c557600080fd5b505af11580156103d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fd9190610b92565b505050565b3360009081526004602052604090206001810154905462093a809081906127109061042d9042610b22565b6003543360009081526004602052604090206001015461044d9190610b39565b6104579190610b39565b6104619190610b58565b61046b9190610b58565b6104759083610b7a565b91505090565b6001546001600160a01b03166104a35760405162461bcd60e51b81526004016101cf90610a96565b6002546001600160a01b03166104cb5760405162461bcd60e51b81526004016101cf90610ad7565b336000908152600460205260409020600101548111156105395760405162461bcd60e51b8152602060048201526024808201527f5354414b494e473a616d6f756e7420697320736d616c6c207468616e207265716044820152631d595cdd60e21b60648201526084016101cf565b3360009081526004602052604090205462093a809081906127109061055e9042610b22565b6003543360009081526004602052604090206001015461057e9190610b39565b6105889190610b39565b6105929190610b58565b61059c9190610b58565b33600090815260046020526040812060020180549091906105be908490610b7a565b909155505033600090815260046020526040812042815560010180548492906105e8908490610b22565b909155505060015460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016103ab565b6000546001600160a01b0316331461064e5760405162461bcd60e51b81526004016101cf90610a61565b61065860006109c8565b565b61067e60405180606001604052806000815260200160008152602001600081525090565b5033600090815260046020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b6000546001600160a01b031633146106e25760405162461bcd60e51b81526004016101cf90610a61565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031661072c5760405162461bcd60e51b81526004016101cf90610a96565b6002546001600160a01b03166107545760405162461bcd60e51b81526004016101cf90610ad7565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156107a657600080fd5b505af11580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de9190610b92565b503360009081526004602052604090206001015462093a809015158061081557503360009081526004602052604090206002015415155b156108d0573360009081526004602052604090205481906127109061083a9042610b22565b6003543360009081526004602052604090206001015461085a9190610b39565b6108649190610b39565b61086e9190610b58565b6108789190610b58565b336000908152600460205260408120600201805490919061089a908490610b7a565b909155505033600090815260046020526040812042815560010180548492906108c4908490610b7a565b9091555061090e915050565b506040805160608101825282815242602080830191825260008385018181523382526004909252939093209151825551600182015590516002909101555b50565b6000546001600160a01b0316331461093b5760405162461bcd60e51b81526004016101cf90610a61565b6001600160a01b0381166109a05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101cf565b61090e816109c8565b336000908152600460205260408120546109c39042610b22565b905090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610a2a57600080fd5b81356001600160a01b0381168114610a4157600080fd5b9392505050565b600060208284031215610a5a57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f5354414b494e473a646f65736e277420736574207374616b696e6720746f6b656040820152603760f91b606082015260800190565b6020808252818101527f5354414b494e473a646f65736e2774207365742072657761726420746f6b656e604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015610b3457610b34610b0c565b500390565b6000816000190483118215151615610b5357610b53610b0c565b500290565b600082610b7557634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610b8d57610b8d610b0c565b500190565b600060208284031215610ba457600080fd5b81518015158114610a4157600080fdfea26469706673582212204e44e8d138e0b79685170a3bf90118c7eb480a104c46961068fc53033669ad4a64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806376e35d891161007157806376e35d891461011f5780638aee8127146101495780638da5cb5b1461015c578063a694fc3a14610177578063f2fde38b1461018a578063f8a8fd6d1461019d57600080fd5b80631e9b12ef146100b957806334fcf437146100ce5780633ccfd60b146100e15780633d18b912146100e95780635d3eea9114610104578063715018a614610117575b600080fd5b6100cc6100c7366004610a18565b6101a5565b005b6100cc6100dc366004610a48565b6101fa565b6100cc610229565b6100f1610402565b6040519081526020015b60405180910390f35b6100cc610112366004610a48565b61047b565b6100cc610624565b61012761065a565b60408051825181526020808401519082015291810151908201526060016100fb565b6100cc610157366004610a18565b6106b8565b6000546040516001600160a01b0390911681526020016100fb565b6100cc610185366004610a48565b610704565b6100cc610198366004610a18565b610911565b6100f16109a9565b6000546001600160a01b031633146101d85760405162461bcd60e51b81526004016101cf90610a61565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102245760405162461bcd60e51b81526004016101cf90610a61565b600355565b6001546001600160a01b03166102515760405162461bcd60e51b81526004016101cf90610a96565b6002546001600160a01b03166102795760405162461bcd60e51b81526004016101cf90610ad7565b3360009081526004602052604090205462093a809081906127109061029e9042610b22565b600354336000908152600460205260409020600101546102be9190610b39565b6102c89190610b39565b6102d29190610b58565b6102dc9190610b58565b33600090815260046020526040812060020180549091906102fe908490610b7a565b90915550503360009081526004602052604090204281556002015461035e5760405162461bcd60e51b81526020600482015260166024820152755354414b494e473a616d6f756e74206973207a65726f60501b60448201526064016101cf565b3360008181526004602081905260408083206002908101805494905554905163a9059cbb60e01b8152918201939093526024810182905290916001600160a01b03169063a9059cbb906044015b602060405180830381600087803b1580156103c557600080fd5b505af11580156103d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fd9190610b92565b505050565b3360009081526004602052604090206001810154905462093a809081906127109061042d9042610b22565b6003543360009081526004602052604090206001015461044d9190610b39565b6104579190610b39565b6104619190610b58565b61046b9190610b58565b6104759083610b7a565b91505090565b6001546001600160a01b03166104a35760405162461bcd60e51b81526004016101cf90610a96565b6002546001600160a01b03166104cb5760405162461bcd60e51b81526004016101cf90610ad7565b336000908152600460205260409020600101548111156105395760405162461bcd60e51b8152602060048201526024808201527f5354414b494e473a616d6f756e7420697320736d616c6c207468616e207265716044820152631d595cdd60e21b60648201526084016101cf565b3360009081526004602052604090205462093a809081906127109061055e9042610b22565b6003543360009081526004602052604090206001015461057e9190610b39565b6105889190610b39565b6105929190610b58565b61059c9190610b58565b33600090815260046020526040812060020180549091906105be908490610b7a565b909155505033600090815260046020526040812042815560010180548492906105e8908490610b22565b909155505060015460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016103ab565b6000546001600160a01b0316331461064e5760405162461bcd60e51b81526004016101cf90610a61565b61065860006109c8565b565b61067e60405180606001604052806000815260200160008152602001600081525090565b5033600090815260046020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b6000546001600160a01b031633146106e25760405162461bcd60e51b81526004016101cf90610a61565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031661072c5760405162461bcd60e51b81526004016101cf90610a96565b6002546001600160a01b03166107545760405162461bcd60e51b81526004016101cf90610ad7565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156107a657600080fd5b505af11580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de9190610b92565b503360009081526004602052604090206001015462093a809015158061081557503360009081526004602052604090206002015415155b156108d0573360009081526004602052604090205481906127109061083a9042610b22565b6003543360009081526004602052604090206001015461085a9190610b39565b6108649190610b39565b61086e9190610b58565b6108789190610b58565b336000908152600460205260408120600201805490919061089a908490610b7a565b909155505033600090815260046020526040812042815560010180548492906108c4908490610b7a565b9091555061090e915050565b506040805160608101825282815242602080830191825260008385018181523382526004909252939093209151825551600182015590516002909101555b50565b6000546001600160a01b0316331461093b5760405162461bcd60e51b81526004016101cf90610a61565b6001600160a01b0381166109a05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101cf565b61090e816109c8565b336000908152600460205260408120546109c39042610b22565b905090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610a2a57600080fd5b81356001600160a01b0381168114610a4157600080fd5b9392505050565b600060208284031215610a5a57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f5354414b494e473a646f65736e277420736574207374616b696e6720746f6b656040820152603760f91b606082015260800190565b6020808252818101527f5354414b494e473a646f65736e2774207365742072657761726420746f6b656e604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015610b3457610b34610b0c565b500390565b6000816000190483118215151615610b5357610b53610b0c565b500290565b600082610b7557634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610b8d57610b8d610b0c565b500190565b600060208284031215610ba457600080fd5b81518015158114610a4157600080fdfea26469706673582212204e44e8d138e0b79685170a3bf90118c7eb480a104c46961068fc53033669ad4a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Staker.sol:Staker",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 833,
        "contract": "contracts/Staker.sol:Staker",
        "label": "_stakingToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 835,
        "contract": "contracts/Staker.sol:Staker",
        "label": "_rewardToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 837,
        "contract": "contracts/Staker.sol:Staker",
        "label": "_rate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 842,
        "contract": "contracts/Staker.sol:Staker",
        "label": "stakes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(StakeData)831_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(StakeData)831_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Staker.StakeData)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeData)831_storage"
      },
      "t_struct(StakeData)831_storage": {
        "encoding": "inplace",
        "label": "struct Staker.StakeData",
        "members": [
          {
            "astId": 826,
            "contract": "contracts/Staker.sol:Staker",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 828,
            "contract": "contracts/Staker.sol:Staker",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 830,
            "contract": "contracts/Staker.sol:Staker",
            "label": "rewardAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}