/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Staker, StakerInterface } from "../../contracts/Staker";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "getReward",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStakingData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "time",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardAmount",
            type: "uint256",
          },
        ],
        internalType: "struct Staker.StakeData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    name: "setRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddr",
        type: "address",
      },
    ],
    name: "setRewardToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddr",
        type: "address",
      },
    ],
    name: "setStakingToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a33610024565b6064600355610074565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610bea806100836000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806376e35d891161007157806376e35d891461011f5780638aee8127146101495780638da5cb5b1461015c578063a694fc3a14610177578063f2fde38b1461018a578063f8a8fd6d1461019d57600080fd5b80631e9b12ef146100b957806334fcf437146100ce5780633ccfd60b146100e15780633d18b912146100e95780635d3eea9114610104578063715018a614610117575b600080fd5b6100cc6100c7366004610a18565b6101a5565b005b6100cc6100dc366004610a48565b6101fa565b6100cc610229565b6100f1610402565b6040519081526020015b60405180910390f35b6100cc610112366004610a48565b61047b565b6100cc610624565b61012761065a565b60408051825181526020808401519082015291810151908201526060016100fb565b6100cc610157366004610a18565b6106b8565b6000546040516001600160a01b0390911681526020016100fb565b6100cc610185366004610a48565b610704565b6100cc610198366004610a18565b610911565b6100f16109a9565b6000546001600160a01b031633146101d85760405162461bcd60e51b81526004016101cf90610a61565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102245760405162461bcd60e51b81526004016101cf90610a61565b600355565b6001546001600160a01b03166102515760405162461bcd60e51b81526004016101cf90610a96565b6002546001600160a01b03166102795760405162461bcd60e51b81526004016101cf90610ad7565b3360009081526004602052604090205462093a809081906127109061029e9042610b22565b600354336000908152600460205260409020600101546102be9190610b39565b6102c89190610b39565b6102d29190610b58565b6102dc9190610b58565b33600090815260046020526040812060020180549091906102fe908490610b7a565b90915550503360009081526004602052604090204281556002015461035e5760405162461bcd60e51b81526020600482015260166024820152755354414b494e473a616d6f756e74206973207a65726f60501b60448201526064016101cf565b3360008181526004602081905260408083206002908101805494905554905163a9059cbb60e01b8152918201939093526024810182905290916001600160a01b03169063a9059cbb906044015b602060405180830381600087803b1580156103c557600080fd5b505af11580156103d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fd9190610b92565b505050565b3360009081526004602052604090206001810154905462093a809081906127109061042d9042610b22565b6003543360009081526004602052604090206001015461044d9190610b39565b6104579190610b39565b6104619190610b58565b61046b9190610b58565b6104759083610b7a565b91505090565b6001546001600160a01b03166104a35760405162461bcd60e51b81526004016101cf90610a96565b6002546001600160a01b03166104cb5760405162461bcd60e51b81526004016101cf90610ad7565b336000908152600460205260409020600101548111156105395760405162461bcd60e51b8152602060048201526024808201527f5354414b494e473a616d6f756e7420697320736d616c6c207468616e207265716044820152631d595cdd60e21b60648201526084016101cf565b3360009081526004602052604090205462093a809081906127109061055e9042610b22565b6003543360009081526004602052604090206001015461057e9190610b39565b6105889190610b39565b6105929190610b58565b61059c9190610b58565b33600090815260046020526040812060020180549091906105be908490610b7a565b909155505033600090815260046020526040812042815560010180548492906105e8908490610b22565b909155505060015460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016103ab565b6000546001600160a01b0316331461064e5760405162461bcd60e51b81526004016101cf90610a61565b61065860006109c8565b565b61067e60405180606001604052806000815260200160008152602001600081525090565b5033600090815260046020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b6000546001600160a01b031633146106e25760405162461bcd60e51b81526004016101cf90610a61565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031661072c5760405162461bcd60e51b81526004016101cf90610a96565b6002546001600160a01b03166107545760405162461bcd60e51b81526004016101cf90610ad7565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156107a657600080fd5b505af11580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de9190610b92565b503360009081526004602052604090206001015462093a809015158061081557503360009081526004602052604090206002015415155b156108d0573360009081526004602052604090205481906127109061083a9042610b22565b6003543360009081526004602052604090206001015461085a9190610b39565b6108649190610b39565b61086e9190610b58565b6108789190610b58565b336000908152600460205260408120600201805490919061089a908490610b7a565b909155505033600090815260046020526040812042815560010180548492906108c4908490610b7a565b9091555061090e915050565b506040805160608101825282815242602080830191825260008385018181523382526004909252939093209151825551600182015590516002909101555b50565b6000546001600160a01b0316331461093b5760405162461bcd60e51b81526004016101cf90610a61565b6001600160a01b0381166109a05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101cf565b61090e816109c8565b336000908152600460205260408120546109c39042610b22565b905090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610a2a57600080fd5b81356001600160a01b0381168114610a4157600080fd5b9392505050565b600060208284031215610a5a57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f5354414b494e473a646f65736e277420736574207374616b696e6720746f6b656040820152603760f91b606082015260800190565b6020808252818101527f5354414b494e473a646f65736e2774207365742072657761726420746f6b656e604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015610b3457610b34610b0c565b500390565b6000816000190483118215151615610b5357610b53610b0c565b500290565b600082610b7557634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610b8d57610b8d610b0c565b500190565b600060208284031215610ba457600080fd5b81518015158114610a4157600080fdfea26469706673582212204e44e8d138e0b79685170a3bf90118c7eb480a104c46961068fc53033669ad4a64736f6c63430008090033";

type StakerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staker__factory extends ContractFactory {
  constructor(...args: StakerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Staker> {
    return super.deploy(overrides || {}) as Promise<Staker>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Staker {
    return super.attach(address) as Staker;
  }
  override connect(signer: Signer): Staker__factory {
    return super.connect(signer) as Staker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakerInterface {
    return new utils.Interface(_abi) as StakerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Staker {
    return new Contract(address, _abi, signerOrProvider) as Staker;
  }
}
